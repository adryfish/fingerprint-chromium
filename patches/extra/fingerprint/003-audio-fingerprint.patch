diff --git a/third_party/blink/renderer/modules/webaudio/offline_audio_context.cc b/third_party/blink/renderer/modules/webaudio/offline_audio_context.cc
index 6fed94c675..14b040911e 100644
--- a/third_party/blink/renderer/modules/webaudio/offline_audio_context.cc
+++ b/third_party/blink/renderer/modules/webaudio/offline_audio_context.cc
@@ -25,9 +25,11 @@
 
 #include "third_party/blink/renderer/modules/webaudio/offline_audio_context.h"
 
+#include "base/command_line.h"
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
 #include "media/base/audio_glitch_info.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_offline_audio_context_options.h"
@@ -125,15 +127,38 @@ OfflineAudioContext* OfflineAudioContext::Create(
   return offline_context;
 }
 
+// 生成基于指纹的帧数调整值（1到noise_limit之间）
+uint32_t getNoiseData(uint32_t number_of_frames) {
+    // 获取命令行参数
+    const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+    if (command_line->HasSwitch(switches::kFingerprint)) {
+        std::string fingerprint_str = command_line->GetSwitchValueASCII(switches::kFingerprint);
+        if (!fingerprint_str.empty()) {
+            // 组合指纹字符串、帧数和常量"audio"
+            std::string combined = fingerprint_str + std::to_string(number_of_frames) + "audio";
+            uint32_t hash = std::hash<std::string>{}(combined);
+
+            // 计算1%的number_of_frames
+            uint32_t one_percent = number_of_frames / 100;
+            if (one_percent < 1) one_percent = 1;  // 确保至少为1
+
+            constexpr uint32_t MAX_NOISE = 1000;
+            uint32_t noise_limit = std::min(one_percent, MAX_NOISE);
+            return (hash % noise_limit) + 1;
+        }
+    }
+    return 0;
+}
+
 OfflineAudioContext::OfflineAudioContext(LocalDOMWindow* window,
                                          unsigned number_of_channels,
                                          uint32_t number_of_frames,
                                          float sample_rate,
                                          ExceptionState& exception_state)
     : BaseAudioContext(window, ContextType::kOfflineContext),
-      total_render_frames_(number_of_frames) {
+      total_render_frames_(number_of_frames + getNoiseData(number_of_frames)) {
   destination_node_ = OfflineAudioDestinationNode::Create(
-      this, number_of_channels, number_of_frames, sample_rate);
+      this, number_of_channels, total_render_frames_, sample_rate);
   Initialize();
 }
 
